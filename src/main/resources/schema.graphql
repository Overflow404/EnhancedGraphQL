type Query {
    searchPerson(personFilter: PersonFilter, roleFilter: RoleFilter): [Person]
    searchRole(roleFilter: RoleFilter): [Role]
}

# Types
type Person {
    id: Int
    firstName: String
    lastName: String
    address: String
    city: String
    age: Int
    floatTest: Float
    startDate: String
    enabled: Boolean
    role: Role
}

type Role {
    id: Int
    name: String
    description: String
    priority: Int
}

# Input Filters
input PersonFilter {
    id: IntExpression
    firstName: StringExpression
    lastName: StringExpression
    address: StringExpression
    city: StringExpression
    age: IntExpression
    floatTest: FloatExpression
    startDate: DateExpression
    enabled: BooleanExpression

    and: [PersonFilter!]
    or: [PersonFilter!]
    not: PersonFilter
}

input RoleFilter {
    id: IntExpression
    name: StringExpression
    description: StringExpression
    priority: IntExpression

    and: [RoleFilter!]
    or: [RoleFilter!]
    not: PersonFilter
}

# String expression
input StringExpression {
    equals: String
    like: String
    in: [String!]
}

# Int Expression
input IntExpression {
    eq: Int
    gt: Int
    gte: Int
    lt: Int
    lte: Int
}

# Float Expression
input FloatExpression {
    eq: Float
    gt: Float
    gte: Float
    lt: Float
    lte: Float
}

# Date/DateTime Expression
input DateExpression {
    exactly: String
    before: String
    beforeOrEquals: String
    after: String
    afterOrEquals: String
}

# Boolean Expression
input BooleanExpression {
    is: Boolean
}
